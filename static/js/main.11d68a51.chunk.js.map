{"version":3,"sources":["components/button.jsx","components/board.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","Component","Game","state","xIsNext","stepNumber","history","Array","fill","step","setState","slice","length","calculateWinner","concat","status","PlayAgain","current","winner","draw","forEach","square","checkDraw","map","jumpTo","handleClick","lines","a","b","c","App","color","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11d68a51.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Square(props){\r\n    return (\r\n        <button\r\n            className = \"square\"\r\n            onClick = {props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport Square from './button';\r\n\r\nexport default class Board extends Component {\r\n    renderSquare(i){\r\n        return <Square value={this.props.squares[i]}\r\n        onClick={()=>this.props.onClick(i)}\r\n        />\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./board\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      history: [{ squares: Array(9).fill(null) }],\r\n    };\r\n  }\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const winner = calculateWinner(squares);\r\n    if (winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat({\r\n        squares: squares,\r\n      }),\r\n      xIsNext: !this.state.xIsNext,\r\n      stepNumber: history.length,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    const draw = checkDraw(current.squares);\r\n    \r\n\r\n    let status;\r\n    let PlayAgain;\r\n    \r\n    if (winner) {\r\n      status = \"Winner is \" + winner;\r\n      PlayAgain = (\r\n        <button\r\n          className=\"play-again-btn\"\r\n          onClick={() => history.map(() => this.jumpTo(0))}\r\n        >\r\n          Wanna Play Again?\r\n        </button>\r\n      );\r\n    }\r\n    else if(draw){\r\n      status = \"Oops, It's a draw !\";\r\n      PlayAgain = (\r\n        <button\r\n          className=\"play-again-btn\"\r\n          onClick={() => history.map(() => this.jumpTo(0))}\r\n        >\r\n          Wanna Play Again?\r\n        </button>\r\n      );\r\n    }\r\n    else {\r\n      status = (this.state.xIsNext ? \"X\" : \"O\") + \"'s Turn\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n        </div>\r\n        <div className=\"game-board\">\r\n          <Board\r\n            onClick={(i) => this.handleClick(i)}\r\n            squares={current.squares}\r\n          />\r\n        </div>\r\n        {PlayAgain}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction checkDraw(squares){\r\n  let draw=true;\r\n  squares.forEach(square=>{\r\n    if(square==null){\r\n      draw=false;\r\n    }\r\n  });\r\n\r\n  return draw;\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className = \"header\">\n        Tic-Tac-Toe\n      </div>\n      <Game />\n      <div className=\"footer\">\n        Made with <font color=\"red\">â™¥</font> by <a href=\"https://github.com/Bhargav252000\">Bhargav Gohil</a>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}